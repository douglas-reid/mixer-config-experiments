// Code generated by protoc-gen-go.
// source: metrics.proto
// DO NOT EDIT!

/*
Package metric is a generated protocol buffer package.

It is generated from these files:
	metrics.proto

It has these top-level messages:
	LinearBuckets
	ExponentialBuckets
	ExplicitBuckets
	BucketsDefinition
	Template
*/
package metric

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ValueType int32

const (
	ValueType_VALUE_TYPE_UNSPECIFIED ValueType = 0
	ValueType_STRING                 ValueType = 1
	ValueType_INT64                  ValueType = 2
	ValueType_DOUBLE                 ValueType = 3
	ValueType_BOOL                   ValueType = 4
	ValueType_TIMESTAMP              ValueType = 5
	ValueType_IP_ADDRESS             ValueType = 6
	ValueType_EMAIL_ADDRESS          ValueType = 7
	ValueType_URI                    ValueType = 8
	ValueType_DNS_NAME               ValueType = 9
	ValueType_DURATION               ValueType = 10
	ValueType_STRING_MAP             ValueType = 11
)

var ValueType_name = map[int32]string{
	0:  "VALUE_TYPE_UNSPECIFIED",
	1:  "STRING",
	2:  "INT64",
	3:  "DOUBLE",
	4:  "BOOL",
	5:  "TIMESTAMP",
	6:  "IP_ADDRESS",
	7:  "EMAIL_ADDRESS",
	8:  "URI",
	9:  "DNS_NAME",
	10: "DURATION",
	11: "STRING_MAP",
}
var ValueType_value = map[string]int32{
	"VALUE_TYPE_UNSPECIFIED": 0,
	"STRING":                 1,
	"INT64":                  2,
	"DOUBLE":                 3,
	"BOOL":                   4,
	"TIMESTAMP":              5,
	"IP_ADDRESS":             6,
	"EMAIL_ADDRESS":          7,
	"URI":                    8,
	"DNS_NAME":               9,
	"DURATION":               10,
	"STRING_MAP":             11,
}

func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}
func (ValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Kind int32

const (
	Kind_METRIC_KIND_UNSPECIFIED Kind = 0
	Kind_GAUGE                   Kind = 1
	Kind_COUNTER                 Kind = 2
	Kind_DISTRIBUTION            Kind = 3
)

var Kind_name = map[int32]string{
	0: "METRIC_KIND_UNSPECIFIED",
	1: "GAUGE",
	2: "COUNTER",
	3: "DISTRIBUTION",
}
var Kind_value = map[string]int32{
	"METRIC_KIND_UNSPECIFIED": 0,
	"GAUGE":                   1,
	"COUNTER":                 2,
	"DISTRIBUTION":            3,
}

func (x Kind) String() string {
	return proto.EnumName(Kind_name, int32(x))
}
func (Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type LinearBuckets struct {
	NumFiniteBuckets int32   `protobuf:"varint,1,opt,name=num_finite_buckets,json=numFiniteBuckets" json:"num_finite_buckets,omitempty"`
	Width            float64 `protobuf:"fixed64,2,opt,name=width" json:"width,omitempty"`
	Offset           float64 `protobuf:"fixed64,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *LinearBuckets) Reset()                    { *m = LinearBuckets{} }
func (m *LinearBuckets) String() string            { return proto.CompactTextString(m) }
func (*LinearBuckets) ProtoMessage()               {}
func (*LinearBuckets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LinearBuckets) GetNumFiniteBuckets() int32 {
	if m != nil {
		return m.NumFiniteBuckets
	}
	return 0
}

func (m *LinearBuckets) GetWidth() float64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *LinearBuckets) GetOffset() float64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ExponentialBuckets struct {
	NumFiniteBuckets int32   `protobuf:"varint,1,opt,name=num_finite_buckets,json=numFiniteBuckets" json:"num_finite_buckets,omitempty"`
	GrowthFactor     float64 `protobuf:"fixed64,2,opt,name=growth_factor,json=growthFactor" json:"growth_factor,omitempty"`
	Scale            float64 `protobuf:"fixed64,3,opt,name=scale" json:"scale,omitempty"`
}

func (m *ExponentialBuckets) Reset()                    { *m = ExponentialBuckets{} }
func (m *ExponentialBuckets) String() string            { return proto.CompactTextString(m) }
func (*ExponentialBuckets) ProtoMessage()               {}
func (*ExponentialBuckets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExponentialBuckets) GetNumFiniteBuckets() int32 {
	if m != nil {
		return m.NumFiniteBuckets
	}
	return 0
}

func (m *ExponentialBuckets) GetGrowthFactor() float64 {
	if m != nil {
		return m.GrowthFactor
	}
	return 0
}

func (m *ExponentialBuckets) GetScale() float64 {
	if m != nil {
		return m.Scale
	}
	return 0
}

type ExplicitBuckets struct {
	Bounds []float64 `protobuf:"fixed64,1,rep,packed,name=bounds" json:"bounds,omitempty"`
}

func (m *ExplicitBuckets) Reset()                    { *m = ExplicitBuckets{} }
func (m *ExplicitBuckets) String() string            { return proto.CompactTextString(m) }
func (*ExplicitBuckets) ProtoMessage()               {}
func (*ExplicitBuckets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExplicitBuckets) GetBounds() []float64 {
	if m != nil {
		return m.Bounds
	}
	return nil
}

type BucketsDefinition struct {
	// Types that are valid to be assigned to Definition:
	//	*BucketsDefinition_LinearBuckets
	//	*BucketsDefinition_ExponentialBuckets
	//	*BucketsDefinition_ExplicitBuckets
	Definition isBucketsDefinition_Definition `protobuf_oneof:"definition"`
}

func (m *BucketsDefinition) Reset()                    { *m = BucketsDefinition{} }
func (m *BucketsDefinition) String() string            { return proto.CompactTextString(m) }
func (*BucketsDefinition) ProtoMessage()               {}
func (*BucketsDefinition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isBucketsDefinition_Definition interface {
	isBucketsDefinition_Definition()
}

type BucketsDefinition_LinearBuckets struct {
	LinearBuckets *LinearBuckets `protobuf:"bytes,1,opt,name=linear_buckets,json=linearBuckets,oneof"`
}
type BucketsDefinition_ExponentialBuckets struct {
	ExponentialBuckets *ExponentialBuckets `protobuf:"bytes,2,opt,name=exponential_buckets,json=exponentialBuckets,oneof"`
}
type BucketsDefinition_ExplicitBuckets struct {
	ExplicitBuckets *ExplicitBuckets `protobuf:"bytes,3,opt,name=explicit_buckets,json=explicitBuckets,oneof"`
}

func (*BucketsDefinition_LinearBuckets) isBucketsDefinition_Definition()      {}
func (*BucketsDefinition_ExponentialBuckets) isBucketsDefinition_Definition() {}
func (*BucketsDefinition_ExplicitBuckets) isBucketsDefinition_Definition()    {}

func (m *BucketsDefinition) GetDefinition() isBucketsDefinition_Definition {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (m *BucketsDefinition) GetLinearBuckets() *LinearBuckets {
	if x, ok := m.GetDefinition().(*BucketsDefinition_LinearBuckets); ok {
		return x.LinearBuckets
	}
	return nil
}

func (m *BucketsDefinition) GetExponentialBuckets() *ExponentialBuckets {
	if x, ok := m.GetDefinition().(*BucketsDefinition_ExponentialBuckets); ok {
		return x.ExponentialBuckets
	}
	return nil
}

func (m *BucketsDefinition) GetExplicitBuckets() *ExplicitBuckets {
	if x, ok := m.GetDefinition().(*BucketsDefinition_ExplicitBuckets); ok {
		return x.ExplicitBuckets
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BucketsDefinition) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BucketsDefinition_OneofMarshaler, _BucketsDefinition_OneofUnmarshaler, _BucketsDefinition_OneofSizer, []interface{}{
		(*BucketsDefinition_LinearBuckets)(nil),
		(*BucketsDefinition_ExponentialBuckets)(nil),
		(*BucketsDefinition_ExplicitBuckets)(nil),
	}
}

func _BucketsDefinition_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BucketsDefinition)
	// definition
	switch x := m.Definition.(type) {
	case *BucketsDefinition_LinearBuckets:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LinearBuckets); err != nil {
			return err
		}
	case *BucketsDefinition_ExponentialBuckets:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExponentialBuckets); err != nil {
			return err
		}
	case *BucketsDefinition_ExplicitBuckets:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExplicitBuckets); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BucketsDefinition.Definition has unexpected type %T", x)
	}
	return nil
}

func _BucketsDefinition_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BucketsDefinition)
	switch tag {
	case 1: // definition.linear_buckets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LinearBuckets)
		err := b.DecodeMessage(msg)
		m.Definition = &BucketsDefinition_LinearBuckets{msg}
		return true, err
	case 2: // definition.exponential_buckets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExponentialBuckets)
		err := b.DecodeMessage(msg)
		m.Definition = &BucketsDefinition_ExponentialBuckets{msg}
		return true, err
	case 3: // definition.explicit_buckets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExplicitBuckets)
		err := b.DecodeMessage(msg)
		m.Definition = &BucketsDefinition_ExplicitBuckets{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BucketsDefinition_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BucketsDefinition)
	// definition
	switch x := m.Definition.(type) {
	case *BucketsDefinition_LinearBuckets:
		s := proto.Size(x.LinearBuckets)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BucketsDefinition_ExponentialBuckets:
		s := proto.Size(x.ExponentialBuckets)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BucketsDefinition_ExplicitBuckets:
		s := proto.Size(x.ExplicitBuckets)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Template struct {
	Name       string               `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value      ValueType            `protobuf:"varint,2,opt,name=value,enum=metric.ValueType" json:"value,omitempty"`
	Dimensions map[string]ValueType `protobuf:"bytes,3,rep,name=dimensions" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=metric.ValueType"`
	// @type_only (or some such annotation)
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// @type_only (or some such annotation)
	Kind Kind `protobuf:"varint,5,opt,name=kind,enum=metric.Kind" json:"kind,omitempty"`
	// @type_only (or some such annotation)
	Buckets *BucketsDefinition `protobuf:"bytes,6,opt,name=buckets" json:"buckets,omitempty"`
}

func (m *Template) Reset()                    { *m = Template{} }
func (m *Template) String() string            { return proto.CompactTextString(m) }
func (*Template) ProtoMessage()               {}
func (*Template) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Template) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Template) GetValue() ValueType {
	if m != nil {
		return m.Value
	}
	return ValueType_VALUE_TYPE_UNSPECIFIED
}

func (m *Template) GetDimensions() map[string]ValueType {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Template) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Template) GetKind() Kind {
	if m != nil {
		return m.Kind
	}
	return Kind_METRIC_KIND_UNSPECIFIED
}

func (m *Template) GetBuckets() *BucketsDefinition {
	if m != nil {
		return m.Buckets
	}
	return nil
}

func init() {
	proto.RegisterType((*LinearBuckets)(nil), "metric.LinearBuckets")
	proto.RegisterType((*ExponentialBuckets)(nil), "metric.ExponentialBuckets")
	proto.RegisterType((*ExplicitBuckets)(nil), "metric.ExplicitBuckets")
	proto.RegisterType((*BucketsDefinition)(nil), "metric.BucketsDefinition")
	proto.RegisterType((*Template)(nil), "metric.Template")
	proto.RegisterEnum("metric.ValueType", ValueType_name, ValueType_value)
	proto.RegisterEnum("metric.Kind", Kind_name, Kind_value)
}

func init() { proto.RegisterFile("metrics.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0x86, 0x31, 0x06, 0x03, 0x03, 0x24, 0x9b, 0x6d, 0x9b, 0xd0, 0xf4, 0x82, 0xe8, 0xa1, 0x69,
	0x54, 0x71, 0x48, 0xaa, 0xaa, 0xea, 0xa1, 0xaa, 0x89, 0x37, 0x89, 0x15, 0x6c, 0xd0, 0x62, 0x47,
	0xea, 0xc9, 0x72, 0xf0, 0xd2, 0xac, 0x30, 0x6b, 0x64, 0x4c, 0x93, 0x1c, 0xfa, 0x64, 0x7d, 0x8d,
	0x3e, 0x4b, 0xcf, 0x95, 0xd7, 0x98, 0x42, 0x72, 0xa9, 0x7a, 0xdb, 0xf9, 0x67, 0xf8, 0xe7, 0x9b,
	0x1f, 0xc9, 0xd0, 0x9c, 0xb1, 0x24, 0xe6, 0xe3, 0x45, 0x77, 0x1e, 0x47, 0x49, 0x84, 0xb5, 0xac,
	0xec, 0x4c, 0xa1, 0xd9, 0xe7, 0x82, 0xf9, 0x71, 0x6f, 0x39, 0x9e, 0xb2, 0x64, 0x81, 0xdf, 0x01,
	0x16, 0xcb, 0x99, 0x37, 0xe1, 0x82, 0x27, 0xcc, 0xbb, 0xc9, 0xd4, 0x96, 0xd2, 0x56, 0x8e, 0xca,
	0x14, 0x89, 0xe5, 0xec, 0x5c, 0x36, 0xf2, 0xe9, 0xe7, 0x50, 0xbe, 0xe3, 0x41, 0x72, 0xdb, 0x2a,
	0xb6, 0x95, 0x23, 0x85, 0x66, 0x05, 0xde, 0x07, 0x2d, 0x9a, 0x4c, 0x16, 0x2c, 0x69, 0xa9, 0x52,
	0x5e, 0x55, 0x9d, 0x1f, 0x80, 0xc9, 0xfd, 0x3c, 0x12, 0x4c, 0x24, 0xdc, 0x0f, 0xff, 0x6f, 0xe3,
	0x6b, 0x68, 0x7e, 0x8b, 0xa3, 0xbb, 0xe4, 0xd6, 0x9b, 0xf8, 0xe3, 0x24, 0x8a, 0x57, 0x9b, 0x1b,
	0x99, 0x78, 0x2e, 0xb5, 0x14, 0x6b, 0x31, 0xf6, 0x43, 0xb6, 0xda, 0x9f, 0x15, 0x9d, 0xb7, 0xb0,
	0x4b, 0xee, 0xe7, 0x21, 0x1f, 0xf3, 0x24, 0x77, 0xdb, 0x07, 0xed, 0x26, 0x5a, 0x8a, 0x20, 0xdd,
	0xa7, 0xa6, 0xa4, 0x59, 0xd5, 0xf9, 0xad, 0xc0, 0xde, 0x6a, 0xc6, 0x60, 0x92, 0x8c, 0x47, 0x02,
	0x7f, 0x86, 0x9d, 0x50, 0x86, 0xb5, 0x45, 0x59, 0x3f, 0x79, 0xd1, 0xcd, 0xd2, 0xec, 0x6e, 0x45,
	0x79, 0x59, 0xa0, 0xcd, 0x70, 0x2b, 0x5b, 0x0b, 0x9e, 0xb1, 0xbf, 0xf7, 0xaf, 0x4d, 0x8a, 0xd2,
	0xe4, 0x30, 0x37, 0x79, 0x1a, 0xd1, 0x65, 0x81, 0x62, 0xf6, 0x34, 0x38, 0x03, 0x10, 0x5b, 0xdd,
	0xb3, 0xf6, 0x52, 0xa5, 0xd7, 0xc1, 0x86, 0xd7, 0xe6, 0xbd, 0x97, 0x05, 0xba, 0xcb, 0xb6, 0xa5,
	0x5e, 0x03, 0x20, 0x58, 0x9f, 0xd8, 0xf9, 0x55, 0x84, 0xaa, 0xc3, 0x66, 0xf3, 0xd0, 0x4f, 0x18,
	0xc6, 0x50, 0x12, 0xfe, 0x8c, 0xc9, 0x2b, 0x6b, 0x54, 0xbe, 0xf1, 0x1b, 0x28, 0x7f, 0xf7, 0xc3,
	0x25, 0x93, 0xd4, 0x3b, 0x27, 0x7b, 0xf9, 0xa6, 0xeb, 0x54, 0x74, 0x1e, 0xe6, 0x8c, 0x66, 0x7d,
	0xfc, 0x05, 0x20, 0xe0, 0x33, 0x26, 0x16, 0x3c, 0x12, 0x29, 0x97, 0x7a, 0x54, 0x3f, 0x69, 0xe7,
	0xd3, 0xf9, 0x8a, 0xae, 0xb1, 0x1e, 0x21, 0x22, 0x89, 0x1f, 0xe8, 0xc6, 0x6f, 0x70, 0x1b, 0xea,
	0x01, 0x5b, 0x8c, 0x63, 0x3e, 0x4f, 0xd1, 0x5a, 0x25, 0x49, 0xb1, 0x29, 0xe1, 0x36, 0x94, 0xa6,
	0x5c, 0x04, 0xad, 0xb2, 0x64, 0x69, 0xe4, 0xee, 0x57, 0x5c, 0x04, 0x54, 0x76, 0xf0, 0x29, 0x54,
	0xf2, 0x68, 0x34, 0x19, 0xcd, 0xcb, 0x7c, 0xe8, 0xc9, 0xdf, 0x4b, 0xf3, 0xc9, 0xc3, 0x21, 0xec,
	0x3e, 0xe2, 0xc2, 0x08, 0xd4, 0x29, 0x7b, 0x58, 0x25, 0x91, 0x3e, 0xff, 0x39, 0x88, 0x4f, 0xc5,
	0x8f, 0xca, 0xf1, 0x4f, 0x05, 0x6a, 0xeb, 0x06, 0x3e, 0x84, 0xfd, 0x6b, 0xbd, 0xef, 0x12, 0xcf,
	0xf9, 0x3a, 0x24, 0x9e, 0x6b, 0x8f, 0x86, 0xe4, 0xcc, 0x3c, 0x37, 0x89, 0x81, 0x0a, 0x18, 0x40,
	0x1b, 0x39, 0xd4, 0xb4, 0x2f, 0x90, 0x82, 0x6b, 0x50, 0x36, 0x6d, 0xe7, 0xc3, 0x7b, 0x54, 0x4c,
	0x65, 0x63, 0xe0, 0xf6, 0xfa, 0x04, 0xa9, 0xb8, 0x0a, 0xa5, 0xde, 0x60, 0xd0, 0x47, 0x25, 0xdc,
	0x84, 0x9a, 0x63, 0x5a, 0x64, 0xe4, 0xe8, 0xd6, 0x10, 0x95, 0xf1, 0x0e, 0x80, 0x39, 0xf4, 0x74,
	0xc3, 0xa0, 0x64, 0x34, 0x42, 0x1a, 0xde, 0x83, 0x26, 0xb1, 0x74, 0xb3, 0xbf, 0x96, 0x2a, 0xb8,
	0x02, 0xaa, 0x4b, 0x4d, 0x54, 0xc5, 0x0d, 0xa8, 0x1a, 0xf6, 0xc8, 0xb3, 0x75, 0x8b, 0xa0, 0x9a,
	0xac, 0x5c, 0xaa, 0x3b, 0xe6, 0xc0, 0x46, 0x90, 0xfa, 0x64, 0x0c, 0x9e, 0xa5, 0x0f, 0x51, 0xfd,
	0xd8, 0x82, 0x52, 0x1a, 0x29, 0x7e, 0x05, 0x07, 0x16, 0x71, 0xa8, 0x79, 0xe6, 0x5d, 0x99, 0xb6,
	0xf1, 0x08, 0xbc, 0x06, 0xe5, 0x0b, 0xdd, 0xbd, 0x20, 0x48, 0xc1, 0x75, 0xa8, 0x9c, 0x0d, 0x5c,
	0xdb, 0x21, 0x14, 0x15, 0x31, 0x82, 0x86, 0x61, 0xa6, 0x76, 0x3d, 0x57, 0xda, 0xab, 0x37, 0x9a,
	0xfc, 0x04, 0x9d, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xea, 0xe1, 0x8a, 0x28, 0x93, 0x04, 0x00,
	0x00,
}
